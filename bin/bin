#!/usr/bin/env python

# bin
# Jim Bagrow
# Last Modified: 2016-09-09

"""
    This file is part of Datatools.
    
    Datatools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    Datatools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with Datatools.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function
import sys, os, numpy
import warnings
warnings.simplefilter("ignore", Warning)

name = os.path.basename(sys.argv[0])
tstr = "logarithmically" if name == "logbin" else "linearly"
usage = \
"""Usage: %s [options] [number of bins]

Compute the histogram of the data received from STDIN using %s spaced
  bins.  If the number of bins is unspecified, an estimate is used based on the
  number of data points.

Options:
  -n | --number : Return number of occurrences in each bin, not fraction.

Example:
  cat vals.txt | %s 200 | plot -c "set xlabel 'x'; set ylabel 'Pr(x)';" """ % (name,tstr,name)

error = "Number of bins must be an integer, run `%s --help` for info." % name

if __name__ == '__main__':
    
    argv = [s.lower() for s in sys.argv[1:]]
    if "-h" in argv or "--help" in argv:
        sys.exit(usage)
    
    normed = True
    if argv and argv[0] in ['-n', '--number']:
        normed = False
        argv.pop(0)
    try:
        num_bins = int(argv[0])
    except IndexError:
        num_bins = None
    except ValueError:
        sys.exit(error)
    
    if name == "logbin":
        data = [ float(x) for x in sys.stdin if x.strip() and float(x) > 0 ]
    else:
        data = [ float(x) for x in sys.stdin if x.strip() ]
    
    if num_bins is None:
        from math import sqrt
        num_bins = int(sqrt(len(data)))
    
    if name == "logbin":
        min_data,max_data = min(data),max(data)
        bin_edges = numpy.logspace( numpy.log10(min_data), numpy.log10(max_data), num_bins+1 )
        
        try: # deal with deprecated numpy behavior :(
            hist,bin_edges = numpy.histogram(data, bins=bin_edges, normed=normed, density=normed)
        except TypeError:
            hist,bin_edges = numpy.histogram(data, bins=bin_edges, normed=normed)
    else:
        hist,bin_edges = numpy.histogram(data, bins=num_bins, normed=normed)
    
    bin_centers = bin_edges[0:-1] + 0.5*(bin_edges[1:] - bin_edges[0:-1])
    #print numpy.sum(hist*numpy.diff(bin_edges)) # check normalization...
    
    for b,h in zip(bin_centers, hist):
        print(b, h)
