#!/usr/bin/env python

# el2info
# Jim Bagrow
# Last Modified: 2016-09-09

from __future__ import print_function
import sys, os
try:
    import networkx
except ImportError:
    sys.exit("networkx is required, see http://networkx.lanl.gov/")

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options]

Compute a number of statistics for the network whose edgelist was received
  from STDIN.  Edgelist delimiter must be tab or space. An example edgelist is
  provided: <DATATOOLS>/tutorial/karate.edgelist.  Only unweighted, undirected
  networks are currently supported. 
  
  By default the user is prompted whether or not to compute the network's
  diameter, since this can be a slow calculation. If the network is not
  connected, the diameter of the giant component will be computed.

Options:
  -g     | --gcc        : Only examine the giant connected component of the
                          network.
  -dia   | --diameter   : Compute diameter. No prompt will be given.
  -nodia | --nodiameter : Do not compute diameter. No prompt will be given.

Example:
  cat edgelist.txt | %s """ % (name,name)


try:
    input = raw_input
except NameError:
    pass

## {{{ http://code.activestate.com/recipes/577058/ (r2)
def query_yes_no(question):
    """Ask a yes/no question via raw_input() and return True or False."""
    valid = {"yes":True, "y":True, "ye":True,
             "no":False, "n":False}
    default = "no"
    
    while 1:
        sys.stdout.write(question + " [y/N] ")
        choice = input().lower()
        if choice in valid:
            return valid[choice]
        else:
            return valid[default]
## end of http://code.activestate.com/recipes/577058/ }}}


def get_edge(line):
    """First try to split with tab, then with space. No other delimiters are
    currently supporting...
    """
    L = line.strip().split("\t")[:2]
    if len(L) == 2:
        return L
    return line.strip().split(" ")[:2]


if __name__ == '__main__':
    # parse options:
    gcc_only        = False
    prompt_diameter = True
    skip_diameter   = False
    force_diameter  = False
    if '-h' in sys.argv or '--help' in sys.argv:
        sys.exit(usage)
    elif '-g' in sys.argv or '--gcc' in sys.argv:
        gcc_only = True
    elif '-dia' in sys.argv or '--diameter' in sys.argv:
        force_diameter  = True
        prompt_diameter = False
    elif '-nodia' in sys.argv or '--nodiameter' in sys.argv:
        skip_diameter = True
        prompt_diameter = False
    
    if force_diameter and skip_diameter:
        sys.exit("Mutually exclusive options given. Exiting...")
    
    
    # read edgelist from stdin into networkx Graph:
    edges = [ get_edge(line) for line in sys.stdin if line.strip() ]
    G = networkx.Graph() # only unweighted, undirected graphs are supported...
    G.add_edges_from( edges )
    
    if gcc_only:
        G = networkx.connected_component_subgraphs(G)[0]
        N_comps = "1 (GCC only)"
    else:
        L = list(networkx.connected_components(G))
        N_comps = len(L)
    
    N   = G.number_of_nodes()
    M   = G.number_of_edges()
    n2c = networkx.clustering(G)
    T   = networkx.transitivity(G)
    if hasattr(n2c, 'values'):
        C = 1.0 * sum(n2c.values()) / len(n2c)
    else: # older version of networkx
        C = 1.0 * sum(n2c) / len(n2c)
    
    # do the diameter?
    if not skip_diameter and N_comps > 1 and not gcc_only:
        Gdia = list(networkx.connected_component_subgraphs(G))[0]
    else:
        Gdia = G
    if prompt_diameter:
        sys.stdin = open("/dev/tty") # not portable?
        prompt_diameter = query_yes_no("Compute the diameter? (slow for large networks)")
    
    
    # display output:
    flt_fmt = "%0.8f"
    print("       Number of Nodes =", N                             )
    print("       Number of Links =", M                             )
    print("          Link Density =", flt_fmt % (M / (N*(N-1)/2.0)) )
    print("        Average Degree =", flt_fmt % (2.0 * M / N)       )
    print("Clustering Coefficient =", flt_fmt % C                   )
    print("          Transitivity =", flt_fmt % T                   )
    print("  Number of Components =", N_comps                       )
    
    if prompt_diameter:
        print("              Diameter =", networkx.diameter(Gdia))
    elif force_diameter:
        print("              Diameter =", networkx.diameter(Gdia))
    
    if gcc_only is False and N_comps > 1:
        print("       Fraction in GCC =", flt_fmt % (1.0 * len(L[0]) / N))
    
