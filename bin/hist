#!/usr/bin/env python

# hist.py
# Jim Bagrow
# Last Modified: 2011-12-11

from __future__ import print_function
import sys, os
import numpy
import warnings
warnings.simplefilter("ignore", Warning)

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options] [number of bins]

Plot histogram of X-data received from STDIN.  Multiple histograms can be
plotted by either passing multiple columns of X-data through STDIN (assuming
each distribution has the same number of datapoints) or by giving a list of
files each containing X-data.

Options:
  -p              : Passes a string to gnuplot's plot directive.  The
                    subsequent arg must be valid gnuplot.  For example 
                    -p 'with lines' will plot the XY-data using lines instead
                    of linespoints.
  -c              : Passes a command to gnuplot.  The subsequent arg must be 
                    valid gnuplot.  The command will be run before gnuplot's 
                    plot is executed.  For example,
                    -c 'set xlabel "x"; set ylabel "y"' will label the graph.
  -x   | --funcs  : A comma-separated list of functions to plot after other
                    curves are drawn.  For example: -x 'x**0.5,cos(x)'.  The
                    variable should always be 'x'.
  -f   | --files  : Specify list of files (following this argument) that each
                    contain X-data to plot.  Data is not read from STDIN.
  -n   | --number : Return number of occurrences in each bin, not fraction.
  -lx  | --logx   : Use logarithmic x-axis.
  -ly  | --logy   : Use logarithmic y-axis.
  -lxy | --logxy  : Use double logarithmic axes.
  -l   | --log    : Shortcut for -lxy / --logxy.
  -k   | --key    : Shortcut for gnuplot to show the key (legend).
         --lbl    : Shortcut to label the graph axes.  --lbl "x;y" is
                    equivalent to -c 'set xlabel "x"; set ylabel "y"'.
  -xr  | --xrange : Set the range of the x-axis.  For example, -xr 0:1, limits
                    the x-axis to between 0 and 1.  An endpoint of the range
                    may be omitted, e.g. -xr :1 will only force the right end
                    of the axis to stop at 1.
  -yr  | --yrange : Same as xrange but for the y-axis.
  -o   | --output : The plot is saved as a pdf to a filename specified in the
                    arg following this flag. No plot window is opened.

Example:
  cat tutorial/xy.dat | %s -c 'set xr [1:10]' """ % (name,name)

def write(data,filename, num_bins=None):
    if num_bins is None:
        from math import sqrt
        num_bins = int(sqrt(len(data)))
    
    if name == "loghist":
        min_data,max_data = min(data),max(data)
        bin_edges = numpy.logspace( numpy.log10(min_data), numpy.log10(max_data), num_bins+1 )
        try: # deal with deprecated numpy behavior :(
            hist,bin_edges = numpy.histogram(data, bins=bin_edges, normed=normed, density=normed)
        except TypeError:
            hist,bin_edges = numpy.histogram(data, bins=bin_edges, normed=normed)
    else:
        hist,bin_edges = numpy.histogram(data, bins=num_bins, normed=normed)
    
    bin_centers = bin_edges[0:-1] + 0.5*(bin_edges[1:] - bin_edges[0:-1])
    
    f = open(filename, 'w') 
    if name == "loghist":
        for b,h in zip(bin_centers, hist):
            if h > 0.0:
                f.write("%f %f\n" % (b, h))
    else:
        for b,h in zip(bin_centers, hist):
            f.write("%f %f\n" % (b, h))
    f.close()


if __name__ == '__main__':
    
    # parse args:
    argv = [ s.lower() for s in sys.argv[1:] ]
    if '-h' in argv or '--help' in argv:
        sys.exit( usage )
    A = set(argv)
    
    logX,logY = "",""
    if set(["-lx","--logx"]) & A:
        logX = "set log x"
    if set(["-ly","--logy"]) & A:
        logY = "set log y"
    if set(["-l","-lxy","--log","--logxy"]) & A:
        logX,logY = "set log x","set log y"
    if name == "loghist" and logX == logY == "":
        logX,logY = "set log x","set log y"
    
    force_key = False
    if "-k" in A or "---key" in A:
        force_key = True
    normed = True
    if '-n' in A or  '--number' in A:
        normed = False
    
    fstr=''
    cstr=''
    pstr='w lp pt 4'
    ostr='set term qt enhanced persist'
    list_infiles = None
    num_bins = None
    for i,arg in enumerate(argv):
        if os.path.exists(arg): # is a file
            continue
        if arg == "-p":
            pstr = argv[i+1]
        if arg == "-c":
            cstr += argv[i+1]+"; "
        if arg == "-lbl":
            xy = tuple(argv[i+1].split(";"))
            if len(xy) == 2:
                cstr += "set xlabel \"%s\"; set ylabel \"%s\"; " % xy
            else:
                cstr += "set xlabel \"%s\"; " % xy
        if arg in ['-x', '--funcs','--functions']:
            fstr = argv[i+1]
        if arg == "-f" or arg == "--files":
            list_infiles = [ f for f in argv[(i+1):] if os.path.exists(f) ]
            if not list_infiles:
                sys.exit( "Error: input files were specified, but none found.")
        if arg in ["-xr", "--xrange"]:
            xrstr = argv[i+1]
            xrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr += "set xrange [%s]; " % xrstr
        if arg in ["-yr", "--yrange"]: # two or more, use a for
            yrstr = argv[i+1]
            yrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr +=  "set yrange [%s]; " % yrstr
        if arg in ["-o", "--output"]:
            fname = argv[i+1]
            if fname[-4:] != ".pdf":
                fname += ".pdf"
            ostr = "set term pdf; set output \"%s\" " % fname
        if not os.path.exists(arg): # not a file
            try:
                num_bins = int(arg)
            except ValueError:
                pass
    
    # read data:
    if list_infiles: # from files
        L = []
        for f in list_infiles:
            if name == "loghist":
                L.append( [float(l.strip()) for l in open(f) if l.strip() and float(l) > 0] )
            else:
                L.append( [float(l.strip()) for l in open(f) if l.strip()] )
        list_titles = [l.replace("_","\_") for l in list_infiles] # since enhanced
    else:            # from stdin
        if name == "loghist":
            D = [ list(map(float, l.strip().split())) for l in sys.stdin if l.strip() and float(l) > 0 ]
        else:
            D = [ list(map(float, l.strip().split())) for l in sys.stdin if l.strip()                  ]
        try:
            L = list(zip(*D)) # transpose
        except:
            sys.exit("Data malformed, check input.")
        list_titles = ["column %i" for i in range(1,len(L)+1)]
    num_curves = len(L)
    
    files = [ "/tmp/file%i.tmp" % i for i in range(num_curves) ]
    for data,f in zip(L,files):
        write(list(data), f, num_bins=num_bins)
    
    
    # build gnuplot strings:
    kstr = "set key" if force_key else ""
    plotstr = "plot '%s' %s title '%s'" % (files[0], pstr,list_titles[0])
    for i in range(1,num_curves):
        plotstr += ", '%s' %s title '%s'" % (files[i], pstr, list_titles[i])
    if fstr:
        plotstr += ","+fstr
    
    cmd = """export GNUTERM="qt font 'Helvetica,14'"
    gnuplot << EOF
    set style line 2 lc 3 
    set style line 3 lc 4 
    set style line 4 lc 5 
    set style line 5 lc 2 
    #set style increment user 
    %s
    unset key
    %s
    %s
    %s
    %s
    %s
    """ % (ostr, logX,logY, cstr,kstr, plotstr)
    
    # run gnuplot and clean up:
    os.system( cmd )
    for f in files:
        os.system( "rm -f %s" % f )


