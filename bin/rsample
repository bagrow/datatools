#!/usr/bin/env python

# rsample
# Jim Bagrow
# Last Modified: 2013-02-07


import sys, os
import random
import argparse

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s num_samples [FILENAME]

Randomly sample num_samples rows from STDIN or FILENAME and pass to STDOUT.
Sampling is performed using Reservoir Sampling.""" % (name)

def build_parser():
    parser = argparse.ArgumentParser(description='R|' + usage, formatter_class=SmartFormatter)
    parser.add_argument('size', type=int)
    parser.add_argument('filename', type=str, nargs='?')
    return parser

# http://stackoverflow.com/questions/3853722/python-argparse-how-to-insert-newline-in-the-help-text
class SmartFormatter(argparse.HelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()
        # this is the RawTextHelpFormatter._split_lines
        return argparse.HelpFormatter._split_lines(self, text, width)

def sample_without_replacement(size, input):
    # Code adapted from: http://data-analytics-tools.blogspot.com/2009/09/reservoir-sampling-algorithm-in-perl.html
    sample = [];
    for i,line in enumerate(input):
        if i < size:
            sample.append(line)
        elif i >= size and random.random() < size/float(i+1):
            replace = random.randint(0,len(sample)-1)
            sample[replace] = line
    return sample


def main():
    parser = build_parser()
    args = parser.parse_args()

    stream = open(args.filename) if args.filename else sys.stdin
    for line in sample_without_replacement(args.size, stream):
        sys.stdout.write(line)


if __name__ == '__main__':
    main()
