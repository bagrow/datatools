#!/usr/bin/env python
# -*- coding: utf-8 -*-

# fit_heavytail
# Jim Bagrow
# Last Modified: 2016-09-09

from __future__ import print_function
import sys, os
try:
    import powerlaw # third-party install w/ pip, requires `mpmath` also pip-able
except:
    sys.exit("3rd party package `powerlaw` appears to be missing. Exiting...")

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options]

Fit and compare power-laws and log-normal distributions to X-data read from
STDIN.

Options:
  -d   | --discrete  : X-data are discrete (integers).

Example:
  cat tutorial/x_powerlaw.dat | %s""" % (name,name)


if __name__ == '__main__':
    
    # parse args:
    do_discrete = False
    args = sys.argv[1:]
    argv = [ s.lower() for s in args ]
    if '-h' in argv or '--help' in argv:
        sys.exit( usage )
    if "-d" in argv or "--discrete" in argv:
        do_discrete = True
    
    
    if do_discrete:
        data = [int(line.strip()) for line in sys.stdin ]
    else:
        data = [float(line.strip()) for line in sys.stdin ]
    
    
    results = powerlaw.Fit(data, discrete=do_discrete)
    print(                                                                        )
    print(                                                                        )
    print("Power law fit:"                                                        )
    print("      α = %f ± %f" % (results.power_law.alpha, results.power_law.sigma))
    print("   xᴹⁱⁿ =", results.power_law.xmin                                     )
    print(                                                                        )
    print("Log-normal fit:"                                                       )
    print("      µ = %f" % (results.lognormal.mu)                                 )
    print("      σ = %f" % (results.lognormal.sigma)                              )
        
    R, p = results.distribution_compare('power_law', 'lognormal', nested=False)
    print(                                                    )
    print("Compare distributions:"                            )
    print("  log-likehood ratio test: R = %f, p = %f" % (R, p))
    print("  (if R < 0, favor the power-law.)"                )
    
