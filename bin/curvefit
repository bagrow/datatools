#!/usr/bin/env python

# curvefit
# Jim Bagrow
# Last Modified: 2016-09-09

from __future__ import print_function
import sys, os
import re, math

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s FUNCTION [INITIAL VALUES] [options] [plot options]

Fit a curve specified by FUNCTION to XY-data received from STDIN. The
independent variable must be 'x' and initial values of some or all fit
parameters may be specified. If FUNCTION contains spaces or parentheses, it
must be quoted. INITIAL VALUES for parameters default to 1.0 unless specified.
Note that the choice of initial values can be crucial for nonlinear fits; trial
and error is often necessary.

The XY-data and fitted function are passed to `plot` for display (unless
--noplot is used, see below). Most arguments supported by `plot` can be given
here; the exceptions are -x (--funcs), -e (--errors), and -s (--shared). If
given, these are ignored.

Options:
  -n   | --noplot    : Do not pass data and function to `plot`.
  -slr | --linear    : Do linear fit, y=mx+b. FUNCTION not needed.
         --nolabel   : Do not annotate plot with fit information.
  -v   | --verbose   : Print function and fitted parameters to STDOUT.
  -vv  | --vverbose  : Print full gnuplot fit log to STDOUT.
  -vvv | --vvverbose : Holy cow, you want to see everything!

Example:
  cat tutorial/xy.dat | %s "A*sin(x/B)+C" A=3,B=6""" % (name,name)

gnuplot_funcs_list = [
    "abs", "acos", "acosh", "arg", "asin",
    "asinh", "atan", "atan2", "atanh", "besj0",
    "besj1", "besy0", "besy1", "ceil", "cos",
    "cosh", "erf", "erfc", "exp", "floor",
    "gamma", "ibeta", "igamma", "imag", "invnorm",
    "int", "lgamma", "log", "log10", "norm",
    "rand", "real", "sgn", "sin", "sinh",
    "sqrt", "tan", "tanh", "fac"
]

gnuplot_spec_chars_list = [
    "*", "/", "%", "+", "-",
    "!", "<", ">", "&", "^",
    "|", "&", "|", "=", ",",
    ".", "(", ")", "[", "]"
]


def get_fit_params(equation):
    """Parse string `equation` to get all parameters (variables) that are not
    special functions, math operators, or digits.  Parameter names containing
    numbers, such as `x0` are supported.  The equation must have `x` as its
    independent variable.
    """
    # remove special/math characters:
    s = " " + equation
    for char in gnuplot_spec_chars_list:
        s = s.replace(char, " ")
    
    # remove functions:
    for func in gnuplot_funcs_list:
        s = s.replace(func, " ")
    
    # remove numbers (unless part of variable):
    s = re.sub('\s+\d+', ' ', s)
    
    list_params = set(s.split())
    try:
        list_params.remove('x') # remove independent variable
    except KeyError:
        sys.exit("The independent variable must be 'x'. Exiting...")
    if not list_params:
        sys.exit("No fit parameters given. (Check the fit function?) Exiting...")
    return sorted(list(list_params))


def parse_fit_log(logfile, params):
    """Read gnuplot's fit log saved to file `logfile` for the final fitted
    parameter values.
    """
    S = []
    capture = False
    for line in open(logfile):
        if line.startswith("Final set of parameters"):
            capture = True
        if line.startswith("correlation matrix of the fit"):
            capture = False
        if capture and line.strip() and line[0] != "=":
            S.append( line.strip() )
    S = S[1:]
    p2v = {} # parameter -> fitted value
    for s in S:
        X = s.split()
        p2v[ X[0] ] = X[2]
    if len(p2v) != len(params):
        sys.exit("Error: Fit parameters missing, did fit converge?  Exiting...")
    p,v = list(zip(*[ (p,p2v[p]) for p in params]))
    return v


def sub_vals_into_equation(equation, params, values):
    S = equation
    for p,v in zip(params,values):
        S = S.replace(p,v)
    S = S.replace('--','-') # safe?
    return S


def parse_ic(ic,params):
    """Takes strings like 'A=3,B=-0.5' or 'x0-9 x187' and a list of known
    parameter names like ['A','B'] or ['x0','x1'] and makes tuples of
    (parameters,values) like [('A',3.0),('B',-0.5)] or
    [('x0',-9.0),('x1',87.0)]
    """
    p2iv = dict( (p,1.0) for p in params) # default values
    if ic == None:
        return sorted(p2iv.items())
    
    if "," in ic: # assume list of initial values is entirely comma-separated
        L = ic.split(",")
    else:         # otherwise assume space-separated
        L = ic.split()
    L = [x.strip().replace("=","") for x in L] # equals is actually optional
    for x in L:
        for p in params:
            if p in x:
                iv = float(x.replace(p,''))
                p2iv[p] = iv
                break
    return sorted(p2iv.items())


def build_plot_str(equation,param_val):
    """Takes the fit function and fitted parameter values to build a label to
    show on the gnuplot window.
    """
    params,vals = list(zip(*param_val))
    s = "\\n".join( "%s = %s" % (p,v) for (p,v) in param_val)
    return s


def parse_args(args):
    """Args is a list of strings, usually args = sys.argv[1:].  Returns tuple:
    equation,initial_values,options,plot_options.
    """
    equation,initial_values,options,plot_options = "","","",""
    
    # get equation to fit:
    if len(args) < 1:
        sys.exit("Error: No function specified for fitting.  Exiting...")
    equation = args[0] # assume first arg is equation!
    args.pop(0) # remove equation from list
    
    if "-p" not in [a[:2] for a in args]: # default style is points...
        args.append( "-p 'w p'" )
    
    if len(args) > 0:
        # is second arg ic?:
        if args[0][0] == "-": # arg not ic:
            initial_values = ""
        else:
            initial_values = args[0]
            args.pop(0) # remove ic
        
        argsl = [ a.lower() for a in args ]
        # any curvefit options:
        cfopts = set(["-n","--noplot","-v","-vv","-vvv",
                 "--verbose", "--vverbose","--vvverbose", "--nolabel"])
        options = list( set(argsl) & cfopts )
        for o in options:
            argsl.remove(o)
        #options = " ".join(options)
        
        # remove unsupported plot options:
        for bad_opt in ["-e",'--error','-s','--shared']:
            try:
                argsl.remove(bad_opt)
            except ValueError: # not present
                continue
        # did the user try to send other functions to plot:
        # TODO: append fit function to user function(s), instead of replacing
        func_ind = None
        for i,opt in enumerate(argsl):
            if opt == '-x' or opt == '--funcs':
                func_ind = i
        if func_ind is not None:
            argsl.pop(func_ind) # first remove -x or --funcs
            argsl.pop(func_ind) # now remove the functions themselves!
        # add quotes back around plot args:
        new_argsl = []
        for a in argsl:
            if a[0] != '-':
                a = "\"%s\"" % a
            new_argsl.append(a)
        
        if len(new_argsl) > 0:
            plot_options = " ".join(new_argsl)
        
    return equation,initial_values,options,plot_options


def remove_all(*list_files):
    for f in list_files:
        os.system("rm -f %s" % f )


def good_number(s):
    """s is a string that (hopefully) is a float."""
    try:              # not two numbers
        x,y = s.strip().split()[:2]
    except TypeError:
        return False
    except ValueError:
        return False
    try:              # string not a float
        x = float(x)
    except ValueError:
        return False
    try:              # string not a float
        y = float(y)
    except ValueError:
        return False
                      # either number is inf or nan
    if any( math.isnan(v) or math.isinf(v) for v in [x,y] ):
        return False
    
    return True       # passed all tests!
    
if __name__ == '__main__':
    
    # parse args:
    args = sys.argv[1:]
    argv = [ s.lower() for s in args ]
    if '-h' in argv or '--help' in argv:
        sys.exit( usage )
    
    if len(args) == 0:
        args = ["m*x+b"] # default formula is to fit a straight line
    elif "-slr" in args or "--linear" in args:
        args = ["m*x+b"] + args
    
    equation,initial_values, options, plot_options = parse_args( args )
    params        = get_fit_params(equation)
    param_initval = parse_ic(initial_values, params)
    
    # get files ready:
    fileout = "/tmp/file_fit.tmp"
    logfout = "/tmp/file_fit.fit.log"
    remove_all(fileout,logfout)
    
    # redirect STDIN to tmp file:
    fout = open(fileout, 'w')
    fout.write( "".join(l for l in sys.stdin if good_number(l)) )
    fout.close()
    
    # build parameter-based strings for gnuplot command:
    str_ic  = "; ".join("%s = %f" % (p,iv) for p,iv in param_initval)
    str_via = ", ".join(params)
    str_vvv = "" if "-vvv" in options or '--vvverbose' in options else "> /dev/null 2>&1"
    
    # build gnuplot fit command:
    cmd_fit = """gnuplot << EOF %s
    set style line 2 lc 3 
    set style line 3 lc 4 
    set style line 4 lc 5 
    set style line 5 lc 2 
    #set style increment user 
    fac(x) = (int(x)==0) ? 1.0 : int(x) * fac(int(x)-1.0)
    set fit logfile '%s'
    f(x) = %s  # define the function to be fit
    %s         # initial guesses for params
    fit f(x) '%s' using 1:2 via %s
    """ % (str_vvv,logfout,equation, str_ic, fileout, str_via)
    
    # run gnuplot fit:
    os.system( cmd_fit )
    
    # retrieve fitted equation:
    values = parse_fit_log(logfout, params)
    fitted_function = sub_vals_into_equation(equation, params, values)
    
    # print output, if desired: (except for -vvv, which is controlled in cmd_fit)
    if '-vv' in options or '--vverbose' in options: # print the fit.log file
        os.system( "cat %s" % logfout )
    elif '-v' in options or '--verbose' in options: # print the fitted formula
        print("y =", fitted_function)
    
    # plot data and fit, if desired:
    if '-n' not in options and '--noplot' not in options:
        # add fitted function to plot options:
        #plot_options += " -p \"w lp title 'data'\"" # hardwired
        plot_options += " --funcs \"%s w l lw 3 lc rgb 'black' title 'fit'\"" % fitted_function
        
        # add fit label to plot options:
        if "--nolabel" not in options:
            str_lbl = build_plot_str( equation, list(zip(params,values)) )
            str_lbl = "set label 98 \\\"y = %s\\n%s\\\" at graph 0.715,0.95 front" % (equation,str_lbl)
            plot_options += " -c \"%s\"" % str_lbl
            
        # run the plot:
        #print plot_options
        os.system("cat %s | plot %s " % (fileout,plot_options))
    
    
    # clean up:
    remove_all(fileout,logfout)

