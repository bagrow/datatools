#!/usr/bin/env python

# bin2d
# Jim Bagrow
# Last Modified: 2016-09-09

"""
    This file is part of Datatools.
    
    Datatools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    Datatools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    
    You should have received a copy of the GNU General Public License
    along with Datatools.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function
import sys, os
import numpy
from math import log

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options] <number of bins>

Compute the 2D histogram (matrix) of XY-data received from STDIN using linearly
  spaced bins.  The number of bins must be specified, and holds for both the X
  and the Y directions.

Options:
  -l | --log    : Take the log of the value for each bin, useful for
                  logarithmic color scales.
  -n | --number : Return number of occurrences in each bin, not fraction.

Example:
  cat vals.txt | %s 200 | plot2d""" % (name,name)

error = "Number of bins must be an integer, run `%s --help` for info." % name



if __name__ == '__main__':
    
    if "-h" in sys.argv or "--help" in sys.argv:
        sys.exit(usage)
    
    logscale = True  if "-l" in sys.argv or "--log"    in sys.argv else False
    normed   = False if "-n" in sys.argv or "--number" in sys.argv else True
    try:
        num_bins = int(sys.argv[-1])
    except (IndexError,ValueError):
        sys.exit(error)
    
    
    data = [ list(map(float, x.strip().split())) for x in sys.stdin if x.strip() ]
    X,Y = list(zip(*data))
    
    
    H,xedges,yedges = numpy.histogram2d(X,Y, bins=num_bins, normed=normed)
    xcenters = xedges[0:-1] + 0.5*(xedges[1:] - xedges[0:-1])
    ycenters = yedges[0:-1] + 0.5*(yedges[1:] - yedges[0:-1])
    nx, = xcenters.shape
    ny, = ycenters.shape
    
    for i in range(nx):
        for j in range(ny):
            hij = log(H[i,j]) if logscale and H[i,j] != 0.0 else H[i,j]
            print(xcenters[i], ycenters[j], hij)
        print()

