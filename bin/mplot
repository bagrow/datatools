#!/usr/bin/env python

# mplot
# Jim Bagrow
# Last Modified: 2012-02-19

import sys, os

name = os.path.basename(sys.argv[0])
usage = \
"""Usage: %s [options] [files]

Plot XY-data from multiple files on the same axes.

Options:
  -p              : Passes a string to gnuplot's plot directive.  The
                    subsequent arg must be valid gnuplot.  For example 
                    -p 'with lines' will plot the XY-data using lines instead
                    of linespoints.
  -c              : Passes a command to gnuplot.  The subsequent arg must be 
                    valid gnuplot.  The command will be run before gnuplot's 
                    plot is executed.  For example,
                    -c 'set xlabel "x"; set ylabel "y"' will label the graph.
  -e   | --error  : Shorthand for using errorbars.  The plot string 'with 
                    yerrorlines' is used.  This overrides any string given 
                    using -p. Note that gnuplot requires three or four columns
                    of input to render errorbars.
  -x   | --funcs  : A comma-separated list of functions to plot after other
                    curves are drawn.  For example: -x 'x**0.5,cos(x)'.  The
                    variable should always be 'x'.
  -lx  | --logx   : Use logarithmic x-axis.
  -ly  | --logy   : Use logarithmic y-axis.
  -lxy | --logxy  : Use double logarithmic axes.
  -l   | --log    : Shortcut for -lxy / --logxy.
  -k   | --key    : Shortcut for gnuplot to show the key (legend).
         --lbl    : Shortcut to label the graph axes.  --lbl "x;y" is
                    equivalent to -c 'set xlabel "x"; set ylabel "y"'.
  -xr  | --xrange : Set the range of the x-axis.  For example, -xr 0:1, limits
                    the x-axis to between 0 and 1.  An endpoint of the range
                    may be omitted, e.g. -xr :1 will only force the right end
                    of the axis to stop at 1.
  -yr  | --yrange : Same as xrange but for the y-axis.
  -o   | --output : The plot is saved as a pdf to a filename specified in the
                    arg following this flag. No plot window is opened.

Example:
  %s -c 'set xr [0:1]' file1.txt file2.txt """ % (name,name)

if __name__ == '__main__':
    
    # parse args:
    argv = sys.argv[1:]
    largv = [ s.lower() for s in argv ]
    if '-h' in largv or '--help' in largv:
        sys.exit( usage )
    
    list_files = []
    fstr=''
    cstr=''
    pstr='w lp pt 4'
    ostr='set term qt enhanced persist'
    logX,logY = False,False
    force_key = False
    while argv:
        A = argv.pop(0)
        a = A.lower()
        if   a == '-lx' or a == '--logx':
            logX = True
        elif a == '-ly' or a == '--logy':
            logY = True
        elif a == '-l' or a == '-lxy' or a == '--log' or a == '--logxy':
            logX,logY, = True,True
        elif a == '-p':
            pstr = argv.pop(0)
        elif a == '-c':
            cstr += argv.pop(0)+"; "
        elif a == "--lbl" or a == "-lbl":
            xy = argv.pop(0) 
            xy = tuple(xy.split(";"))
            if len(xy) == 2:
                cstr += "set xlabel \"%s\"; set ylabel \"%s\"; " % xy
            else:
                cstr += "set xlabel \"%s\"; " % xy
        elif a in ["-xr", "--xrange"]:
            xrstr = argv.pop(0)
            xrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr += "set xrange [%s]; " % xrstr
        elif a in ["-yr", "--yrange"]: # two or more, use a for
            yrstr = argv.pop(0)
            yrstr.replace(",",":").replace(";",":").replace("_",":")
            cstr +=  "set yrange [%s]; " % yrstr
        if a in ["-o", "--output"]:
            fname = argv.pop(0)
            if fname[-4:] != ".pdf":
                fname += ".pdf"
            ostr = "set term pdf; set output \"%s\" " % fname
        elif a == '-e' or a == '--error':
            pstr = 'w yerrorlines'
        elif a == '-x' or a == '--funcs' or a == '--functions':
            fstr = argv.pop(0)
        elif a == '-k' or a == '--key':
            force_key = True
        elif os.path.exists(A): # is a file
            list_files.append(A)
    
    if not list_files:
        sys.exit("Error: No plottable files found!")
    
    
    kstr = "set key" if force_key else ""
    plotstr = "plot "
    for f in list_files:
        plotstr += "'%s' %s, " % (f, pstr)
    plotstr = plotstr[:-2]
    if fstr:
        plotstr += ","+fstr
    
    logstr = ""
    if logX and logY:
        logstr = "set log xy"
    elif logX and not logY:
        logstr = "set log x"
    elif logY and not logX:
        logstr = "set log y"
    
    
    cmd = """gnuplot << EOF
    set style line 2 lc 3 
    set style line 3 lc 4 
    set style line 4 lc 5 
    set style line 5 lc 2 
    #set style increment user 
    %s
    unset key
    %s
    %s
    %s
    %s
    """ % (ostr, logstr, cstr,kstr, plotstr)
    
    os.system( cmd )


